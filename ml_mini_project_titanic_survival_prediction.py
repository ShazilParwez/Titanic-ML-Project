# -*- coding: utf-8 -*-
"""ML Mini Project - Titanic Survival Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1POhuuoVD5XTTWqqmZVKQnXhySCzrIv3w
"""

# Imports

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

import warnings
warnings.filterwarnings('ignore')

# Load dataset

url = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
data = pd.read_csv(url)

# EDA (Exploratory Data Analysis)

print("Dataset Head:\n", data.head())
print("\nMissing Values:\n", data.isnull().sum())

# Survival count plot

plt.figure(figsize=(5,4))
sns.countplot(x="Survived", data=data, palette="Set2")
plt.title("Survival Distribution (0 = Died, 1 = Survived)")
plt.show()

# Survival by Gender

plt.figure(figsize=(6,4))
sns.countplot(x="Sex", hue="Survived", data=data, palette="Set1")
plt.title("Survival by Gender")
plt.show()

# Survival by Passenger Class

plt.figure(figsize=(6,4))
sns.countplot(x="Pclass", hue="Survived", data=data, palette="Set3")
plt.title("Survival by Passenger Class")

plt.show()

# Feature Selection

features = ["Pclass", "Sex", "Age", "Fare", "Embarked"]
X = data[features]
y = data["Survived"]

# Handle missing values

X["Age"].fillna(X["Age"].median(), inplace=True)
X["Embarked"].fillna(X["Embarked"].mode()[0], inplace=True)

# Encode categorical columns

le = LabelEncoder()
X["Sex"] = le.fit_transform(X["Sex"])
X["Embarked"] = le.fit_transform(X["Embarked"])

# Scale numerical values

scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(X), columns=features)

# Train-Test Split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model

model = LogisticRegression()
model.fit(X_train, y_train)

# Predictions

y_pred = model.predict(X_test)

# Evaluation

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion matrix

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(5,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Died","Survived"], yticklabels=["Died","Survived"])
plt.title("Confusion Matrix")

plt.show()

